{
    "AWSTemplateFormatVersion": "2010-09-09",

    "Description": "Cloudformation template to deploy Grafana Web Frontend for Monitoring Infrastructure. The operating system used for the Grafana Server is Amazon Linux x86-64 2016.09.1 (HVM SSD EBS-Backed).  The Grafana servers are part of an Auto Scaling Group, which are registered to an Applicaton Load Balancer. The Application Load Balancer has been configured to use access logging to an S3 bucket.  As part of the install, the RDS Aurora cluster stores the configuration information, and the Elasticache cluster will maintain session state, which will be leveraged by the Grafana Servers. **NOTE** This template requires the following prerequisites: an RDS Aurora Cluster and an Elasticache cluster.  Please make sure these are created BEFORE deploying this environment.",

    "Parameters": {
        "DBClusterEndpoint": {
            "Type": "String",
            "Description": "Endpoint for RDS Aurora Cluster"
        },

        "CacheClusterEndpoint": {
            "Type": "String",
            "Description": "Endpoint for Elasticache Cluster"
        },

        "AdminDBUser": {
            "NoEcho": "true",
            "Default": "root",
            "Description" : "Admin Username for RDS Aurora Cluster",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "16",
            "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
            "ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters."
        },

        "AdminDBPassword": {
            "NoEcho": "true",
            "Default": "pwd4root",
            "Description" : "Admin Password for RDS Aurora Cluster",
            "Type": "String",
            "MinLength": "8",
            "MaxLength": "41",
            "AllowedPattern" : "[a-zA-Z0-9]*",
            "ConstraintDescription" : "must contain only alphanumeric characters."
        },

        "GrafanaDBUser": {
            "NoEcho": "true",
            "Default": "grafana",
            "Description" : "Username for Grafana access to database on RDS Aurora Cluster",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "16",
            "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
            "ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters."
        },

        "GrafanaDBPassword": {
            "NoEcho": "true",
            "Default": "pwd4grafana",
            "Description" : "Password for Grafana access to database on RDS Aurora Cluster",
            "Type": "String",
            "MinLength": "8",
            "MaxLength": "41",
            "AllowedPattern" : "[a-zA-Z0-9]*",
            "ConstraintDescription" : "must contain only alphanumeric characters."
        },

        "GrafanaDBName": {
            "Default": "grafana",
            "Description" : "RDS Aurora database name for Grafana",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "64",
            "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
            "ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters."
          },

        "WebSubnetOneId":{
            "Description": "First subnet for Grafana Web Infrastructure",
            "Type": "AWS::EC2::Subnet::Id"
        },

        "WebSubnetTwoId":{
            "Description": "Second subnet for Grafana Web Infrastructure",
            "Type": "AWS::EC2::Subnet::Id"
        },

        "WebSecurityGroupId": {
            "Description": "The Grafana Web Frontend security group",
            "Type": "AWS::EC2::SecurityGroup::Id"
        },

        "ELBSecurityGroupId": {
            "Description": "The Elastic Load Balancing security group",
            "Type": "AWS::EC2::SecurityGroup::Id"
        },

        "KeyName": {
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
            "Type": "AWS::EC2::KeyPair::KeyName",
            "ConstraintDescription": "The name of an existing EC2 KeyPair",
            "NoEcho": "False"
        },

        "InstanceType": {
            "Description": "Type of EC2 instance to launch.",
            "Type": "String",
            "Default" : "t2.small",
            "AllowedValues" : [ "t2.small", "t2.medium","t2.large","t2.xlarge", "t2.2xlarge" ],
            "ConstraintDescription": "must be a valid EC2 instance type."
        },

        "MinSize": {
            "Description": "Minimum number of EC2 instances.",
            "Type": "Number",
            "Default": "2",
            "MaxValue": "2"
        },

        "MaxSize": {
            "Description": "Maximum number of EC2 instances.",
            "Type": "Number",
            "Default": "2",
            "MaxValue": "10"
        }
    },

    "Mappings" : {
        "AWSRegion2ELBAccountID": {
            "us-east-1" :      { "ELBAccountId" : "127311923021"},
            "us-east-2" :      { "ELBAccountId" : "033677994240" },
            "us-west-1" :      { "ELBAccountId" : "027434742980" },
            "us-west-2" :      { "ELBAccountId" : "797873946194" },
            "ap-northeast-1" : { "ELBAccountId" : "582318560864" },
            "ap-northeast-2" : { "ELBAccountId" : "600734575887" },
            "ap-south-1" :     { "ELBAccountId" : "718504428378" },
            "sa-east-1" :      { "ELBAccountId" : "507241528517" },
            "ap-southeast-1" : { "ELBAccountId" : "114774131450" },
            "ap-southeast-2" : { "ELBAccountId" : "783225319266" },
            "ca-central-1" :   { "ELBAccountId" : "985666609251" },
            "eu-central-1" :   { "ELBAccountId" : "054676820928" },
            "eu-west-1" :      { "ELBAccountId" : "156460612806" },
            "eu-west-2" :      { "ELBAccountId" : "652711504416" }
        },

        "AWSInstanceType2Arch": {
            "t2.nano"     : { "Arch" : "HVM64"  },
            "t2.micro"    : { "Arch" : "HVM64"  },
            "t2.small"    : { "Arch" : "HVM64"  },
            "t2.medium"   : { "Arch" : "HVM64"  },
            "t2.large"    : { "Arch" : "HVM64"  },
            "t2.xlarge"   : { "Arch" : "HVM64"  },
            "t2.2xlarge"  : { "Arch" : "HVM64"  }
        },

        "AWSRegionArch2AMI": {
            "us-east-1" :      { "HVM64": "ami-0b33d91d" },
            "us-east-2" :      { "HVM64": "ami-c55673a0" },
            "us-west-1" :      { "HVM64": "ami-165a0876" },
            "us-west-2" :      { "HVM64": "ami-f173cc91" },
            "ap-northeast-1" : { "HVM64": "ami-56d4ad31" },
            "ap-northeast-2" : { "HVM64": "ami-dac312b4" },
            "ap-south-1" :     { "HVM64": "ami-f9daac96" },
            "sa-east-1" :      { "HVM64": "ami-80086dec" },
            "ap-southeast-1" : { "HVM64": "ami-dc9339bf" },
            "ap-southeast-2" : { "HVM64": "ami-1c47407f" },
            "ca-central-1" :   { "HVM64": "ami-ebed508f" },
            "eu-central-1" :   { "HVM64": "ami-af0fc0c0" },
            "eu-west-1" :      { "HVM64": "ami-70edb016" },
            "eu-west-2" :      { "HVM64": "ami-f1949e95" }
        },

        "bootstrap": {
            "amazonlinux": {
                "updaterepo": "yum -y update",
                "synctime": "ntpd -u pool.ntp.org",
                "updatecfnbootstrap": "yum install -y aws-cfn-bootstrap",
                "pausetime": "/bin/sleep `expr $(date +%N | cut -c1-1) \\* 10`"
            }
        }
    },

    "Resources": {
        "GrafanaInstanceRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [{
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [ "ec2.amazonaws.com" ]
                        },
                        "Action": [ "sts:AssumeRole" ]
                    }]
                },
                "Path": "/",
                "Policies": [{
                    "PolicyName": "MonitoringInfrastructureAccess",
                    "PolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [{
                            "Effect": "Allow",
                            "Action": [ "cloudformation:*" ],
                            "Resource": "*"
                        },{
                            "Effect": "Allow",
                            "Action": [ "ec2:*" ],
                            "Resource": "*"
                        },{
                            "Effect": "Allow",
                            "Action": [ "cloudwatch:*" ],
                            "Resource": "*"
                        }]
                    }
                }]
            }
        },

        "GrafanaInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [{ "Ref": "GrafanaInstanceRole" }]
            }
        },

        "S3LoggingBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
                "Bucket": { "Ref": "S3LoggingBucket" },
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [ {
                        "Effect": "Allow",
                        "Resource": {
                            "Fn::Join": [
                                "",
                                [
                                    "arn:aws:s3:::",
                                    { "Ref": "S3LoggingBucket" },
                                    "/",
                                    "Logs",
                                    "/AWSLogs/",
                                    { "Ref": "AWS::AccountId" },
                                    "/*"
                                ]
                            ]
                        },
                        "Principal": {
                            "AWS": [{ "Fn::FindInMap": [ "AWSRegion2ELBAccountID", {"Ref" : "AWS::Region"}, "ELBAccountId" ]}]
                        },
                        "Action": [ "s3:PutObject" ]
                    } ]
                }
            }
        },

        "S3LoggingBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "Tags" : [
                    {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"}},
                    {"Key" : "Description", "Value" : "ELB Access Log Bucket for Grafana Web Frontend"}
                ]
            }
        },

        "GrafanaELB": {
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties": {
                "Subnets": [{
                    "Ref": "WebSubnetOneId"
                },{
                    "Ref": "WebSubnetTwoId"
                }],
                "SecurityGroups": [{
                    "Ref": "ELBSecurityGroupId"
                }],
                "Listeners": [{
                    "LoadBalancerPort": "80",
                    "InstancePort": "80",
                    "Protocol": "HTTP",
                    "PolicyNames" : [ "GrafanaCookieStickinessPolicy" ]
                }],
                "AppCookieStickinessPolicy": [{
                    "PolicyName": "GrafanaCookieStickinessPolicy",
                    "CookieName": "grafana_sess"
                }],
                "HealthCheck": {
                    "Target": "HTTP:80/login/",
                    "HealthyThreshold": "2",
                    "UnhealthyThreshold": "10",
                    "Interval": "120",
                    "Timeout": "5"
                },
                "CrossZone": "true",
                "ConnectionDrainingPolicy": {
                    "Enabled": "true",
                    "Timeout": "20"
                },
                "ConnectionSettings": {
                    "IdleTimeout": "30"
                },
                "AccessLoggingPolicy": {
                    "S3BucketName": { "Ref": "S3LoggingBucket" },
                    "S3BucketPrefix": "Logs",
                    "Enabled": "true",
                    "EmitInterval": "5"
                },
                "Tags" : [
                    {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"}},
                    {"Key" : "Description", "Value" : "Load balancer for Grafana Web Frontend"}
                ]
            },
            "DependsOn": "S3LoggingBucketPolicy"
        },

        "GrafanaLaunchConfig" : {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Metadata": {
                "Comment1": "Configure the bootstrap helpers to install the Grafana Web Server",
                "AWS::CloudFormation::Init": {
                    "configSets": {
                        "grafana_install": [ "install_cfn", "configure_mysql", "install_grafana" ]
                    },

                    "install_cfn": {
                        "files": {
                            "/etc/cfn/cfn-hup.conf" : {
                                "content" : { "Fn::Join" : ["", [
                                    "[main]\n",
                                    "stack=", { "Ref" : "AWS::StackId" }, "\n",
                                    "region=", { "Ref" : "AWS::Region" }, "\n"
                                ]]},
                                "mode"    : "000400",
                                "owner"   : "root",
                                "group"   : "root"
                            },

                            "/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
                                "content": { "Fn::Join" : ["", [
                                    "[cfn-auto-reloader-hook]\n",
                                    "triggers=post.update\n",
                                    "path=Resources.GrafanaLaunchConfig.Metadata.AWS::CloudFormation::Init\n",
                                    "action=/opt/aws/bin/cfn-init -v ",
                                    "--stack ", { "Ref" : "AWS::StackName" },
                                    " --resource GrafanaLaunchConfig ",
                                    "--configsets grafana_install ",
                                    "--region ", { "Ref" : "AWS::Region" }, "\n",
                                    "runas=root\n"
                                ]]}
                            }
                        },
        
                        "services": {
                            "sysvinit": {
                                "cfn-hup": { "enabled" : "true", "ensureRunning" : "true",
                                              "files" : ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]
                                           }
                            }
                        }
                    },

                    "configure_mysql" : {
                        "packages": {
                            "yum": {
                                "mysql" : [ ]
                            }
                        },

                        "files": {
                            "/tmp/createdb.mysql": {
                                "content" : { "Fn::Join" : ["", [
                                    "CREATE DATABASE ", { "Ref": "GrafanaDBName" }, ";\n"
                                ]]},
                                "mode"    : "000400",
                                "owner"   : "root",
                                "group"   : "root"
                            },

                            "/tmp/setuserperms.mysql": {
                                "content" : { "Fn::Join" : ["", [
                                    "GRANT USAGE ON `", { "Ref": "GrafanaDBName" }, "`.* to '", { "Ref": "GrafanaDBUser" }, "'@'%' identified by '", { "Ref": "GrafanaDBPassword" }, "';\n",
                                    "GRANT ALL PRIVILEGES ON `", { "Ref": "GrafanaDBName" }, "`.* to '", { "Ref": "GrafanaDBUser" }, "'@'%' with grant option;\n"
                                ]]},
                                "mode"    : "000400",
                                "owner"   : "root",
                                "group"   : "root"
                            }
                        },

                        "commands": {
                            "00_create_grafana_database": {
                                "command": { "Fn::Join" : ["", ["mysql -u ", { "Ref": "AdminDBUser" }, " --password='", { "Ref" : "AdminDBPassword" }, "' -h ", { "Ref": "DBClusterEndpoint" }, " < /tmp/createdb.mysql"]]},
                                "test": { "Fn::Join" : ["", ["$(mysql -u ", { "Ref": "AdminDBUser" }, " --password='", { "Ref" : "AdminDBPassword" }, "' -h ", { "Ref": "DBClusterEndpoint" }, " >/dev/null 2>&1 </dev/null)"]]},
                                "ignoreErrors": "true"
                            },
        
                            "01_set_grafana_user_perms": {
                                "command": { "Fn::Join" : ["", ["mysql -u ", { "Ref": "AdminDBUser" }, " --password='", { "Ref" : "AdminDBPassword" }, "' -h ", { "Ref": "DBClusterEndpoint" }, " < /tmp/setuserperms.mysql"]]},
                                "test": { "Fn::Join" : ["", ["$(mysql -u ", { "Ref": "AdminDBUser" }, " --password='", { "Ref" : "AdminDBPassword" }, "' -h ", { "Ref": "DBClusterEndpoint" }, " >/dev/null 2>&1 </dev/null)"]]}
                            }
                        }
                    },

                    "install_grafana": {
                        "files": {
                            "/etc/grafana/grafana.ini": {
                                "content" : { "Fn::Join" : ["", [
                                    "app_mode = production\n",
                                    "instance_name = ${HOSTNAME}\n",
                                    "[server]\n",
                                    "protocol = http\n",
                                    "http_port = 80\n",
                                    "# The public facing domain name used to access grafana from a browser\n",
                                    "domain = ", { "Fn::Select": [ "0", { "Fn::Split" : [ ".com", { "Fn::GetAtt": ["GrafanaELB", "DNSName"] } ] } ]}, "\n",
                                    "# Redirect to correct domain if host header does not match domain\n",
                                    "# Prevents DNS rebinding attacks\n",
                                    ";enforce_domain = false\n",
                                    "# The full public facing url you use in browser, used for redirects and emails\n",
                                    "# If you use reverse proxy and sub path specify full url (with sub path)\n",
                                    "root_url = %(protocol)s://%(domain)s:/\n",
                                    "# Log web requests\n",
                                    "router_logging = true\n",
                                    "# the path relative working path\n",
                                    ";static_root_path = public\n",
                                    "# enable gzip\n",
                                    ";enable_gzip = false\n",
                                    "# https certs & key file\n",
                                    ";cert_file =\n",
                                    ";cert_key =\n",
                                    "[database]\n",
                                    "# You can configure the database connection by specifying type, host, name, user and password\n",
                                    "# as seperate properties or as on string using the url properties.\n",
                                    "# Either \"mysql\", \"postgres\" or \"sqlite3\", it's your choice\n",
                                    "type = mysql\n",
                                    "host = ", { "Ref": "DBClusterEndpoint" }, ":3306\n",
                                    "name = ", { "Ref": "GrafanaDBName" }, "\n",
                                    "user = ", { "Ref": "GrafanaDBUser" }, "\n",
                                    "# If the password contains # or ; you have to wrap it with trippel quotes. Ex \"\"\"#password;\"\"\"\n",
                                    "password = \"\"\"", { "Ref": "GrafanaDBPassword" }, "\"\"\"\n", 
                                    "[session]\n",
                                    "provider = memcache\n",
                                    "provider_config = ", { "Ref": "CacheClusterEndpoint" }, ":11211\n",
                                    "# Session cookie name\n",
                                    "cookie_name = grafana_sess\n",
                                    "# If you use session in https only, default is false\n",
                                    ";cookie_secure = false\n",
                                    "# Session life time, default is 86400\n",
                                    "session_life_time = 3600\n",
                                    "[security]\n",
                                    "# default admin user, created on startup\n",
                                    ";admin_user = admin\n",
                                    "# default admin password, can be changed before first start of grafana,  or in profile settings\n",
                                    ";admin_password = admin\n",
                                    "# Auto-login remember days\n",
                                    ";login_remember_days = 7\n",
                                    ";cookie_username = grafana_user\n",
                                    ";cookie_remember_name = grafana_remember\n",
                                    "# disable gravatar profile images\n",
                                    ";disable_gravatar = false\n",
                                    "# data source proxy whitelist (ip_or_domain:port separated by spaces)\n",
                                    ";data_source_proxy_whitelist =\n",
                                    "[users]\n",
                                    "# disable user signup / registration\n",
                                    ";allow_sign_up = true\n",
                                    "# Allow non admin users to create organizations\n",
                                    ";allow_org_create = true\n",
                                    ";auto_assign_org = true\n",
                                    ";auto_assign_org_role = Viewer\n",
                                    "# Background text for the user field on the login page\n",
                                    ";login_hint = email or username\n",
                                    ";default_theme = dark\n",
                                    "[auth]\n",
                                    ";disable_login_form = false\n",
                                    "[auth.github]\n",
                                    ";enabled = false\n",
                                    ";allow_sign_up = true\n",
                                    ";client_id = some_id\n",
                                    ";client_secret = some_secret\n",
                                    ";scopes = user:email,read:org\n",
                                    ";auth_url = https://github.com/login/oauth/authorize\n",
                                    ";token_url = https://github.com/login/oauth/access_token\n",
                                    ";api_url = https://api.github.com/user\n",
                                    ";team_ids =\n",
                                    ";allowed_organizations =\n"
                                ]]},
                               "mode"    : "000640",
                               "owner"   : "root",
                               "group"   : "root"
                            }
                        },

                        "commands": {
                            "00_install_grafanarpm": {
                                "command": "yum install -y https://s3-us-west-2.amazonaws.com/grafana-releases/release/grafana-4.2.0-1.x86_64.rpm"
                            },

                            "01_authorize_grafana_port80": {
                                 "command": "setcap 'cap_net_bind_service=+ep' /usr/sbin/grafana-server"
                            }
                        },
                   
                        "services": {
                            "sysvinit": {
                                "grafana-server": { "enabled" : "true", "ensureRunning" : "true",
                                                    "files" : ["/etc/grafana/grafana.ini"]
                                                  }
                            }
                        }
                    }
                }
            },

            "Properties": {
                "ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" },
                               { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "InstanceType" }, "Arch" ] } ] },
                "InstanceType" : { "Ref" : "InstanceType" },
                "SecurityGroups" : [ {"Ref" : "WebSecurityGroupId"} ],
                "KeyName" : { "Ref" : "KeyName" },
                "IamInstanceProfile": { "Ref": "GrafanaInstanceProfile" },
                "InstanceMonitoring": "true",
                "AssociatePublicIpAddress": "true",
                "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
                    "#!/bin/bash -xe\n",
                    { "Fn::FindInMap": [ "bootstrap", "amazonlinux", "updaterepo" ] }, "\n",
                    { "Fn::FindInMap": [ "bootstrap", "amazonlinux", "synctime" ] }, "\n",
                    { "Fn::FindInMap": [ "bootstrap", "amazonlinux", "updatecfnbootstrap" ] }, "\n",

                    "# Install the prerequisite and Grafana packages from metadata\n",
                    "# Add sleep to ensure proper Grafana UI startup\n",
                    { "Fn::FindInMap": [ "bootstrap", "amazonlinux", "pausetime" ] }, "\n",
                    "/opt/aws/bin/cfn-init -v ",
                    "--stack ", { "Ref": "AWS::StackName" },
                    " --resource GrafanaLaunchConfig ",
                    "--configsets grafana_install ",
                    "--region ", { "Ref": "AWS::Region" }, "\n",
         
                    "# Signal the status from cfn-init\n",
                    "/opt/aws/bin/cfn-signal -e $? ",
                    "--stack ", { "Ref": "AWS::StackName" },
                    " --resource GrafanaServerGroup ",
                    "--region ", { "Ref": "AWS::Region" }, "\n"
                ]]}}
            }
        },
 
        "GrafanaServerGroup": {
            "DependsOn": "GrafanaELB",
            "UpdatePolicy": {
                "AutoScalingRollingUpdate": {
                    "MinInstancesInService": { "Ref": "MinSize" },
                    "MaxBatchSize": 1,
                    "WaitOnResourceSignals": "true",
                    "PauseTime": "PT15M"
                }
            },
            "CreationPolicy": {
                "ResourceSignal" : {
                    "Timeout" : "PT15M",
                    "Count"   : { "Ref": "MinSize" } 
                }
            },
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "VPCZoneIdentifier": [{
                    "Ref": "WebSubnetOneId"
                },{
                    "Ref": "WebSubnetTwoId"
                }],
                "Cooldown": "300",
                "MaxSize": { "Ref": "MaxSize" },
                "MinSize": { "Ref": "MinSize" },
                "DesiredCapacity": { "Ref": "MinSize" },
                "LoadBalancerNames": [ { "Ref": "GrafanaELB" } ],
                "LaunchConfigurationName": { "Ref": "GrafanaLaunchConfig" },
                "HealthCheckType": "ELB",
                "HealthCheckGracePeriod": "1200",
                "MetricsCollection": [{
                    "Granularity": "1Minute",
                    "Metrics": [
                        "GroupMinSize",
                        "GroupMaxSize"
                    ]
                }],
                "Tags" : [
                    {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"}, "PropagateAtLaunch": true},
                    {"Key" : "Description", "Value" : "Grafana Web Servers", "PropagateAtLaunch": true}
                ]
            }
        } 
    },

    "Outputs": {
        "GrafanELBUrl": {
            "Value": {
                "Fn::Join": ["", ["http://", {
                    "Fn::GetAtt": ["GrafanaELB", "DNSName"]
                }]]
            },
            "Description": "ELB DNS Name for Grafana Web Frontend"
        }
    }
}
